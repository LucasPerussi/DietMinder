generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model logintry {
  try_id          Int      @id @default(autoincrement())
  try_user        Int
  try_date        DateTime @default(now()) @db.DateTime(0)
  try_ip          String?  @db.VarChar(40)
  try_coordinates String?  @db.VarChar(60)
  try_device      String?  @db.VarChar(100)
  try_status      String?  @db.VarChar(60)
  user            user     @relation(fields: [try_user], references: [usr_id], onUpdate: Restrict, map: "loginTry_fk0")

  @@index([try_user], map: "loginTry_fk0")
}

model user {
  usr_id         Int             @id @default(autoincrement())
  usr_name       String          @db.VarChar(255)
  usr_last_name  String          @db.VarChar(255)
  usr_email      String          @unique(map: "usr_email") @db.VarChar(255)
  usr_password   String          @db.VarChar(255)
  usr_role       Int             @default(1)
  usr_born_date  DateTime?       @db.DateTime(0)
  usr_height     Float?          @db.Float
  usr_weight     Float?          @db.Float
  usr_sex        Int
  usr_picture    String          @default("https://i.imgur.com/N9c1ah6.png") @db.VarChar(255)
  usr_phone      String?         @db.VarChar(255)
  usr_username   String?         @db.VarChar(255)
  usr_city       String?         @db.VarChar(255)
  usr_theme      Int
  usr_doubleStep Int
  usr_created_at DateTime        @default(now()) @db.DateTime(0)
  agenda         agenda[]
  anamnesis      anamnesis[]
  badges         badges[]
  codes          codes[]
  dailycalories  dailycalories[]
  goals          goals[]
  logins         logins[]
  logintry       logintry[]
  logs           logs[]
  meal           meal[]
  nutritionists  nutritionists[]
  patients       patients[]
  registers      registers[]
  results        results[]
  sessions       sessions[]
  timeline       timeline[]
  whitelist      whitelist[]
}

model whitelist {
  wls_id          Int      @id @default(autoincrement())
  wls_user        Int
  wls_date        DateTime @default(now()) @db.DateTime(0)
  wls_ip          String?  @db.VarChar(40)
  wls_coordinates String?  @db.VarChar(60)
  wls_device      String?  @db.VarChar(100)
  wls_city        String?  @db.VarChar(60)
  wls_state       String?  @db.VarChar(60)
  wls_country     String?  @db.VarChar(60)
  user            user     @relation(fields: [wls_user], references: [usr_id], onUpdate: Restrict, map: "whitelist_fk0")

  @@index([wls_user], map: "whitelist_fk0")
}

model agenda {
  age_id           Int           @id @default(autoincrement())
  age_user         Int
  age_nutri        Int
  age_date         DateTime?     @default(now()) @db.DateTime(0)
  age_type         Int           @default(1)
  age_name         String        @db.VarChar(255)
  age_requirements String?       @db.Text
  age_description  String?       @db.Text
  age_location     String?       @db.Text
  age_status       Int           @default(1)
  age_duration     String        @db.VarChar(10)
  user             user          @relation(fields: [age_user], references: [usr_id], onUpdate: Restrict, map: "agenda_fk0")
  nutritionists    nutritionists @relation(fields: [age_nutri], references: [ntr_id], onUpdate: Restrict, map: "agenda_fk1")
  anamnesis        anamnesis[]
  results          results[]

  @@index([age_user], map: "agenda_fk0")
  @@index([age_nutri], map: "agenda_fk1")
}

model anamnesis {
  anm_id              Int             @id @default(autoincrement())
  anm_agenda          Int
  anm_user            Int
  anm_nutri           Int
  anm_altura          Float           @db.Float
  anm_peso            Float           @db.Float
  anm_cintura         Float           @db.Float
  anm_coxa_direita    Float           @db.Float
  anm_braco_relaxado  Float           @db.Float
  anm_quadril         Float           @db.Float
  anm_pant_direita    Float           @db.Float
  anm_braco_contraido Float           @db.Float
  anm_punho           Float           @db.Float
  anm_biceps          Float           @db.Float
  anm_triceps         Float           @db.Float
  anm_subescapular    Float           @db.Float
  anm_pant_medial     Float           @db.Float
  anm_abdominal       Float           @db.Float
  anm_suprailiaca     Float           @db.Float
  anm_coxa            Float           @db.Float
  anm_date            DateTime        @default(now()) @db.DateTime(0)
  anm_comments        String          @db.Text
  agenda              agenda          @relation(fields: [anm_agenda], references: [age_id], onUpdate: Restrict, map: "anamnesis_fk0")
  user                user            @relation(fields: [anm_user], references: [usr_id], onUpdate: Restrict, map: "anamnesis_fk1")
  nutritionists       nutritionists   @relation(fields: [anm_nutri], references: [ntr_id], onUpdate: Restrict, map: "anamnesis_fk2")
  dailycalories       dailycalories[]
  meal                meal[]
  results             results[]

  @@index([anm_agenda], map: "anamnesis_fk0")
  @@index([anm_user], map: "anamnesis_fk1")
  @@index([anm_nutri], map: "anamnesis_fk2")
}

model badges {
  bdg_id   Int      @id @default(autoincrement())
  bdg_user Int
  bdg_goal Int?
  bdg_type Int
  bdg_date DateTime @default(now()) @db.DateTime(0)
  user     user     @relation(fields: [bdg_user], references: [usr_id], onUpdate: Restrict, map: "badges_fk0")
  goals    goals?   @relation(fields: [bdg_goal], references: [gol_id], onDelete: Restrict, onUpdate: Restrict, map: "badges_fk1")

  @@index([bdg_user], map: "badges_fk0")
  @@index([bdg_goal], map: "badges_fk1")
}

model codes {
  cod_id     Int      @id @default(autoincrement())
  cod_user   Int
  cod_code   String   @db.VarChar(255)
  cod_name   String   @db.VarChar(255)
  cod_email  String   @db.VarChar(255)
  cod_status Int      @default(1)
  cod_date   DateTime @default(now()) @db.DateTime(0)
  user       user     @relation(fields: [cod_user], references: [usr_id], onUpdate: Restrict, map: "codes_fk0")

  @@index([cod_user], map: "codes_fk0")
}

model dailycalories {
  cal_id        Int           @id @default(autoincrement())
  cal_user      Int
  cal_anamnese  Int
  cal_nutri     Int
  cal_total     Float         @db.Float
  cal_breakfast Float?        @db.Float
  cal_lunch     Float?        @db.Float
  cal_afternoon Float?        @db.Float
  cal_dinner    Float?        @db.Float
  cal_supper    Float?        @db.Float
  user          user          @relation(fields: [cal_user], references: [usr_id], onUpdate: Restrict, map: "dailyCalories_fk0")
  anamnesis     anamnesis     @relation(fields: [cal_anamnese], references: [anm_id], onUpdate: Restrict, map: "dailyCalories_fk1")
  nutritionists nutritionists @relation(fields: [cal_nutri], references: [ntr_id], onUpdate: Restrict, map: "dailyCalories_fk2")
  meal          meal[]

  @@index([cal_user], map: "dailyCalories_fk0")
  @@index([cal_anamnese], map: "dailyCalories_fk1")
  @@index([cal_nutri], map: "dailyCalories_fk2")
}

model goals {
  gol_id          Int      @id @default(autoincrement())
  gol_name        String   @db.VarChar(255)
  gol_type        Int
  gol_user        Int
  gol_start_date  DateTime @default(now()) @db.DateTime(0)
  gol_target_date DateTime @db.DateTime(0)
  gol_value       Float?   @db.Float
  badges          badges[]
  user            user     @relation(fields: [gol_user], references: [usr_id], onUpdate: Restrict, map: "goals_fk0")

  @@index([gol_user], map: "goals_fk0")
}

model logins {
  lgn_id          Int      @id @default(autoincrement())
  lgn_user        Int
  lgn_ip          String   @db.VarChar(40)
  lgn_coordinates Int
  lgn_date        DateTime @default(now()) @db.DateTime(0)
  lgn_city        String   @db.VarChar(100)
  lgn_state       String   @db.VarChar(100)
  lgn_country     String   @db.VarChar(100)
  lgn_session     String   @db.VarChar(100)
  user            user     @relation(fields: [lgn_user], references: [usr_id], onUpdate: Restrict, map: "logins_fk0")

  @@index([lgn_user], map: "logins_fk0")
}

model logs {
  log_id        Int       @id @default(autoincrement())
  log_user      Int
  log_date      DateTime? @default(now()) @db.DateTime(0)
  log_operation String    @db.VarChar(255)
  log_function  String    @db.VarChar(255)
  log_status    Int
  user          user      @relation(fields: [log_user], references: [usr_id], onUpdate: Restrict, map: "logs_fk0")

  @@index([log_user], map: "logs_fk0")
}

model meal {
  mel_id               Int           @id @default(autoincrement())
  mel_type             Int
  mel_daily_id         Int
  mel_user             Int
  mel_anamnese         Int
  mel_nutri            Int
  mel_protein          String?       @db.VarChar(255)
  mel_protein_portion  Int?
  mel_protein_calories Int?
  mel_veg              String?       @db.VarChar(255)
  mel_veg_portion      Int?
  mel_veg_calories     Int?
  mel_salad            String?       @db.VarChar(255)
  mel_salad_portion    Int?
  mel_salad_calories   Int?
  mel_carb             String?       @db.VarChar(255)
  mel_carb_portion     Int?
  mel_carb_calories    Int?
  mel_date             DateTime?     @default(now()) @db.DateTime(0)
  dailycalories        dailycalories @relation(fields: [mel_daily_id], references: [cal_id], onUpdate: Restrict, map: "meal_fk0")
  user                 user          @relation(fields: [mel_user], references: [usr_id], onUpdate: Restrict, map: "meal_fk1")
  anamnesis            anamnesis     @relation(fields: [mel_anamnese], references: [anm_id], onUpdate: Restrict, map: "meal_fk2")
  nutritionists        nutritionists @relation(fields: [mel_nutri], references: [ntr_id], onUpdate: Restrict, map: "meal_fk3")
  mealextra            mealextra[]

  @@index([mel_daily_id], map: "meal_fk0")
  @@index([mel_user], map: "meal_fk1")
  @@index([mel_anamnese], map: "meal_fk2")
  @@index([mel_nutri], map: "meal_fk3")
}

model mealextra {
  mel_extra_id           Int      @id @default(autoincrement())
  mel_extra_meal         Int
  mel_extra_name         String   @db.VarChar(255)
  mel_extra_portion      String   @db.VarChar(255)
  mel_extra_portion_type String   @db.VarChar(255)
  mel_extra_calories     String   @db.VarChar(255)
  mel_extra_date         DateTime @default(now()) @db.DateTime(0)
  meal                   meal     @relation(fields: [mel_extra_meal], references: [mel_id], onUpdate: Restrict, map: "mealExtra_fk0")

  @@index([mel_extra_meal], map: "mealExtra_fk0")
}

model nutritionists {
  ntr_id        Int             @id @default(autoincrement())
  ntr_user      Int
  ntr_crn       String?         @db.VarChar(255)
  ntr_address   String?         @db.VarChar(255)
  ntr_logo      String?         @db.Text
  ntr_stamp     String?         @db.Text
  ntr_date      DateTime        @default(now()) @db.DateTime(0)
  agenda        agenda[]
  anamnesis     anamnesis[]
  dailycalories dailycalories[]
  meal          meal[]
  user          user            @relation(fields: [ntr_user], references: [usr_id], onUpdate: Restrict, map: "nutritionists_fk0")
  patients      patients[]
  recipes       recipes[]
  results       results[]

  @@index([ntr_user], map: "nutritionists_fk0")
}

model patients {
  pac_id           Int           @id @default(autoincrement())
  pac_user         Int
  pac_nutri        Int
  pac_linking_date DateTime      @default(now()) @db.DateTime(0)
  pac_athlete      Int           @default(1)
  user             user          @relation(fields: [pac_user], references: [usr_id], onUpdate: Restrict, map: "patients_fk0")
  nutritionists    nutritionists @relation(fields: [pac_nutri], references: [ntr_id], onUpdate: Restrict, map: "patients_fk1")

  @@index([pac_user], map: "patients_fk0")
  @@index([pac_nutri], map: "patients_fk1")
}

model products {
  pro_id           Int    @id @default(autoincrement())
  pro_name         String @db.VarChar(255)
  pro_type         Int
  pro_calories     Int
  pro_portion      Int
  pro_portion_type String @db.VarChar(20)
  pro_picture      String @db.Text
}

model recipes {
  rec_id               Int           @id @default(autoincrement())
  rec_nutri            Int
  rec_target           Int           @default(1)
  rec_title            String        @db.VarChar(255)
  rec_description      String        @db.Text
  rec_ingredients      String        @db.Text
  rec_preparation      String        @db.Text
  rec_calories_portion String        @db.Text
  nutritionists        nutritionists @relation(fields: [rec_nutri], references: [ntr_id], onUpdate: Restrict, map: "recipes_fk0")

  @@index([rec_nutri], map: "recipes_fk0")
}

model registers {
  reg_id    Int      @id @default(autoincrement())
  reg_type  Int
  reg_user  Int
  reg_value Float    @db.Float
  reg_date  DateTime @default(now()) @db.DateTime(0)
  user      user     @relation(fields: [reg_user], references: [usr_id], onUpdate: Restrict, map: "registers_fk0")

  @@index([reg_user], map: "registers_fk0")
}

model results {
  res_id                     Int           @id @default(autoincrement())
  res_anamnesis              Int
  res_nutri                  Int
  res_user                   Int
  res_agenda                 Int
  res_data                   DateTime      @default(now()) @db.DateTime(0)
  res_perc_massa_gorda       Float         @db.Float
  res_perc_massa_gorda_sit   String        @db.VarChar(255)
  res_massa_gorda            Float         @db.Float
  res_massa_gorda_sit        String        @db.VarChar(255)
  res_perc_massa_magra       Float         @db.Float
  res_perc_massa_magra_sit   String        @db.VarChar(255)
  res_massa_magra            Float         @db.Float
  res_massa_magra_sit        String        @db.VarChar(255)
  res_soma_dobras            Float         @db.Float
  res_soma_dobras_sit        String        @db.VarChar(255)
  res_razao_cint_quadril     Float         @db.Float
  res_razao_cint_quadril_sit String        @db.VarChar(255)
  res_amb                    Float         @db.Float
  res_amb_sit                String        @db.VarChar(255)
  res_agb                    Float         @db.Float
  res_agb_sit                String        @db.VarChar(255)
  anamnesis                  anamnesis     @relation(fields: [res_anamnesis], references: [anm_id], onUpdate: Restrict, map: "results_fk0")
  nutritionists              nutritionists @relation(fields: [res_nutri], references: [ntr_id], onUpdate: Restrict, map: "results_fk1")
  user                       user          @relation(fields: [res_user], references: [usr_id], onUpdate: Restrict, map: "results_fk2")
  agenda                     agenda        @relation(fields: [res_agenda], references: [age_id], onUpdate: Restrict, map: "results_fk3")

  @@index([res_anamnesis], map: "results_fk0")
  @@index([res_nutri], map: "results_fk1")
  @@index([res_user], map: "results_fk2")
  @@index([res_agenda], map: "results_fk3")
}

model timeline {
  tim_id          Int      @id @default(autoincrement())
  tim_user        Int
  tim_type        Int
  tim_reference   String   @db.VarChar(40)
  tim_date        DateTime @default(now()) @db.DateTime(0)
  tim_title       String   @db.VarChar(255)
  tim_description String   @db.Text
  user            user     @relation(fields: [tim_user], references: [usr_id], onUpdate: Restrict, map: "timeline_fk0")

  @@index([tim_user], map: "timeline_fk0")
}

model sessions {
  ses_id              Int       @id @default(autoincrement())
  ses_key             String    @db.VarChar(40)
  ses_ip              String    @db.VarChar(20)
  ses_location        String    @db.VarChar(40)
  ses_city            String    @db.VarChar(100)
  ses_state           String    @db.VarChar(100)
  ses_country         String    @db.VarChar(20)
  ses_timezone        String    @db.VarChar(100)
  ses_status          Int       @default(1)
  ses_created_at      DateTime  @default(now()) @db.DateTime(0)
  ses_expiration_date DateTime? @db.DateTime(0)
  ses_client          Int       @default(1)
  ses_user            Int
  user                user      @relation(fields: [ses_user], references: [usr_id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_ibfk_1")

  @@index([ses_user], map: "ses_user")
}
